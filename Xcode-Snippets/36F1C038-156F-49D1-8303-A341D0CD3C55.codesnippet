<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>tca-feature</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>All</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>import Blocks
import ComposableArchitecture
import Foundation

func doShit() async -&gt; Bool {
  true
}

struct &lt;#XXX#&gt;Feature: Reducer {
  struct State {
    var myVar1: Bool
    var myVar2: Bool
  }

  enum Action {
    case myAction1
    case myAction2(TaskResult&lt;Bool&gt;)
  }

  @Dependency(\.urlSession) var urlSession

  var body: some Reducer&lt;State, Action&gt; {
    Reduce { state, action in  
      switch action {
      case .myAction1:
        state.myVar1 = !state.myVar1
        return .run { send in
          let taskResult = await TaskResult { await doShit() }
          return await send(.myAction2(taskResult))
        }

      case let .myAction2(result):
        switch result {
        case .success:
          print("Success")
        case .failure:
          print("Todo")
        }
        return .none
      }
    }  
  }
}

extension &lt;#XXX#&gt;Feature.State: Equatable {}
extension &lt;#XXX#&gt;Feature.Action: Equatable {}
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>36F1C038-156F-49D1-8303-A341D0CD3C55</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetSummary</key>
	<string>A scaffold of a feature for the composable architecture</string>
	<key>IDECodeSnippetTitle</key>
	<string>TCA Feature</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
